generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id         String    @id @default(uuid()) @db.VarChar(50)
  password   String    @db.VarChar(100)
  phone      BigInt
  email      String    @unique() @db.VarChar(100)
  name       String    @db.VarChar(100)
  cpf        String    @db.VarChar(11)
  active     Boolean?  @default(false)
  biography  String?   @db.LongText
  data_birth DateTime?
  address_id String?   @db.VarChar(50)
  createAt   DateTime  @default(now()) @db.Timestamp(0)
  updateAt   DateTime  @default(now()) @updatedAt @db.Timestamp(0)

  address address? @relation(fields: [address_id], references: [id])

  pet_profile               pet_profile[]
  pet_favorite              pet_favorite[]
  adoptionRequestsAsAdopter adoption[]     @relation("Adopter")
  adoptionRequestsAsDonor   adoption[]     @relation("Donor")
}

model address {
  id           String   @id @default(uuid()) @db.VarChar(50)
  cep          Int?
  place        String
  number       Int
  neighborhood String
  city         String
  uf           String   @db.VarChar(2)
  country      String
  complement   String?
  createAt     DateTime @default(now()) @db.Timestamp(0)
  updateAt     DateTime @default(now()) @updatedAt @db.Timestamp(0)

  user user[]
}

model pet_profile {
  id                   String      @id @default(uuid()) @db.VarChar(50)
  name                 String // Nome do pet
  type                 String? // Tipo de animal (ex: cachorro, gato)
  size                 String? // Porte do pet (pequeno, médio, grande)
  breed                String? // Raça do pet
  gender               String? // Sexo do pet (macho, fêmea)
  age                  Int? // Idade do pet
  description          String? // Descrição geral do pet
  vaccines             String? // Lista de vacinas (pode ser separado futuramente)
  neutered             Boolean? // Se o pet é castrado
  healthy              Boolean? // Se o pet está saudável
  specialNeeds         Boolean? // Se o pet possui necessidades especiais
  category             String? // Categoria (adoção ou venda)
  price                Float? // Preço (caso seja venda, opcional)
  availableForAdoption Boolean?    @default(true) // Está disponível para adoção
  images               pet_image[]
  user_id              String      @db.VarChar(50)
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt

  user         user           @relation(fields: [user_id], references: [id])
  pet_favorite pet_favorite[]
  adoption     adoption[]
}

model pet_image {
  id             String   @id @default(uuid()) @db.VarChar(50)
  url            String
  pet_profile_id String   @db.VarChar(50)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  petProfile pet_profile @relation(fields: [pet_profile_id], references: [id])
}

model pet_favorite {
  id             String   @id @default(uuid()) @db.VarChar(50)
  user_id        String   @db.VarChar(50)
  pet_profile_id String   @db.VarChar(50)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  petProfile pet_profile @relation(fields: [pet_profile_id], references: [id])
  User       user        @relation(fields: [user_id], references: [id])
}

model adoption {
  id         String                @id @default(uuid()) @db.VarChar(50)
  pet_id     String                @db.VarChar(50)
  adopter_id String                @db.VarChar(50)
  donor_id   String                @db.VarChar(50)
  status     RequestStatusAdoption @default(PENDING)
  message    String?
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt

  pet     pet_profile @relation(fields: [pet_id], references: [id])
  adopter user        @relation("Adopter", fields: [adopter_id], references: [id])
  donor   user        @relation("Donor", fields: [donor_id], references: [id])
}

enum RequestStatusAdoption {
  PENDING // Solicitação enviada, aguardando resposta
  ACCEPTED // Solicitação aceita
  REJECTED // Solicitação recusada
  FINALIZED // Adoção finalizada
}
